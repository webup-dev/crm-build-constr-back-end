<?php

/**
 * SetUp:
 *   Create 1 user
 *   Create 3 roles
 *   Create 2 action-roles
 *
 * Check Index:
 *   Check login
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check Index If Roles Are Absent:
 *   Check login
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check Index If Roles-IDs Are Wrong:
 *   Check login
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check store:
 *   Check login
 *   Store a new action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *   Check last action-role in DB
 *
 * Check store If Roles-IDs Are Wrong:
 *   Check login
 *   Store a new action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check update:
 *   Check login
 *   Update the action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check update If Action ID Are Wrong:
 *   Check login
 *   Update the action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Check update If Roles-IDs Are Wrong:
 *   Check login
 *   Update the action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Delete:
 *   Check login
 *   Delete action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *   Check DB
 *
 * Delete If Action ID Are Wrong:
 *   Check login
 *   Delete action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * Delete If Action-Roles IDs Are Wrong:
 *   Check login
 *   Delete action-roles
 *   Check response status
 *   Check response structure
 *   Check response data
 *
 * tearDown:
 *   Delete roles
 *   Delete action_roles
 */

namespace App\Functional\Api\V1\Controllers;

use App\Models\Action_role;
use App\Models\Role;
use Hash;
use App\Models\User;
use App\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

class ActionRolesControllerTest extends TestCase
{
    use DatabaseMigrations;

    /**
     * Create setup
     *
     * @return mixed
     */
    public function setUp()
    : void
    {
        parent::setUp();

        $user1 = new User([
            'name'     => 'Test',
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $user1->save();

        $role1 = new Role([
            'name'        => 'Role 1',
            'description' => 'Description 1'
        ]);

        $role1->save();

        $role2 = new Role([
            'name'        => 'Role 2',
            'description' => 'Description 2'
        ]);

        $role2->save();

        $role3 = new Role([
            'name'        => 'Role 3',
            'description' => 'Description 3'
        ]);

        $role3->save();

        $actionRole1 = new Action_role([
            'action'   => 'controller.action1',
            'role_ids' => json_encode([1, 2])
        ]);

        $actionRole1->save();

        $actionRole2 = new Action_role([
            'action'   => 'controller.action2',
            'role_ids' => json_encode([1, 2])
        ]);

        $actionRole2->save();

    }

    public function tearDown()
    : void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

        Schema::dropIfExists('action_roles');
        Schema::dropIfExists('user_roles');
        Schema::dropIfExists('roles');
        Schema::dropIfExists('users');
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testExample()
    {
        $this->assertTrue(true);
    }

    public function testMe()
    {
        $response = $this->post('api/auth/login', [
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $response->assertStatus(200);

        $responseJSON = json_decode($response->getContent(), true);
        $token        = $responseJSON['token'];

        $this->get('api/auth/me?token=' . $token, [])->assertJson([
            'name'  => 'Test',
            'email' => 'test1@email.com'
        ])->isOk();
    }

    /**
     * Check Index:
     *   Check login
     *   Check response status
     *   Check response structure
     *   Check response data
     */
    public function testIndex()
    {
        // Check login
        $response = $this->post('api/auth/login', [
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $response->assertStatus(200);

        $responseJSON = json_decode($response->getContent(), true);
        $token        = $responseJSON['token'];

        $this->get('api/auth/me?token=' . $token, [])->assertJson([
            'name'  => 'Test',
            'email' => 'test1@email.com'
        ])->isOk();

        // Request
        $response = $this->get('api/action-roles?token=' . $token, []);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'data' =>
                    [
                        [
                            'id',
                            'action',
                            'role_ids',
                            'role_names',
                            'created_at',
                            'updated_at'
                        ]
                    ],
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $data         = $responseJSON['data'];  // array
        $success      = $responseJSON['success'];  // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(count($data), 2);
        $this->assertEquals('controller.action1', $data[0]['action']);
        $this->assertEquals([1, 2], $data[0]['role_ids']);
        $this->assertEquals('Role 1, Role 2', $data[0]['role_names']);
        $this->assertEquals('controller.action2', $data[1]['action']);
        $this->assertEquals([1, 2], $data[1]['role_ids']);
        $this->assertEquals('Role 1, Role 2', $data[1]['role_names']);
        $this->assertEquals(true, $success);
        $this->assertEquals('Action-Roles retrieved successfully', $message);
    }

    /**
     * Check Index If Roles Are Absent:
     *   Check login
     *   Check response status
     *   Check response structure
     *   Check response data
     */
    public function testIndexIfRolesAreAbsent()
    {
        // Check login
        $response = $this->post('api/auth/login', [
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $response->assertStatus(200);

        $responseJSON = json_decode($response->getContent(), true);
        $token        = $responseJSON['token'];

        $this->get('api/auth/me?token=' . $token, [])->assertJson([
            'name'  => 'Test',
            'email' => 'test1@email.com'
        ])->isOk();

        // Delete roles
        $response = $this->delete('api/roles/3?token=' . $token, []);
        $response = $this->delete('api/roles/2?token=' . $token, []);
        $response = $this->delete('api/roles/1?token=' . $token, []);

        // Request
        $response = $this->get('api/action-roles?token=' . $token, []);

        // Check response status
        $response->assertStatus(422);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'message'
            ]
        );
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals('Roles do not exist', $message);
    }

    /** Check store:
     *   Check login
     *   Store a new action-roles
     *   Check response status
     *   Check response structure
     *   Check response data
     *   Check last action-role in DB
     */
    public function testStore()
    {
        // Check login
        $response = $this->post('api/auth/login', [
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $response->assertStatus(200);

        $responseJSON = json_decode($response->getContent(), true);
        $token        = $responseJSON['token'];

        $this->get('api/auth/me?token=' . $token, [])->assertJson([
            'name'  => 'Test',
            'email' => 'test1@email.com'
        ])->isOk();

        // Store a new action-roles
        $response = $this->post('api/action-roles?token=' . $token, [
            'action'   => 'controller.action3',
            'role_ids' => json_encode([1, 3])
        ], []);

        // Check response status
        $response->assertStatus(200);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'message'
            ]
        );

        //Check response data
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals($success, true);
        $this->assertEquals($message, 'New Action-Roles created successfully.');

        // Check DB
        $actionRoles     = DB::table('action_roles')->get()->keyBy('id');
        $count           = $actionRoles->count();
        $lastActionRoles = $actionRoles[$count];
        $this->assertEquals('controller.action3', $lastActionRoles->action);
        $this->assertEquals([1, 3], json_decode($lastActionRoles->role_ids));
    }

    /**
     * Check store If Roles-IDs Are Wrong:
     *   Check login
     *   Store a new action-roles
     *   Check response status
     *   Check response structure
     *   Check response data
     *
     */
    public function testStoreIfRolesIdsAreWrong()
    {
        // Check login
        $response = $this->post('api/auth/login', [
            'email'    => 'test1@email.com',
            'password' => '123456'
        ]);

        $response->assertStatus(200);

        $responseJSON = json_decode($response->getContent(), true);
        $token        = $responseJSON['token'];

        $this->get('api/auth/me?token=' . $token, [])->assertJson([
            'name'  => 'Test',
            'email' => 'test1@email.com'
        ])->isOk();

        // Store a new action-roles
        $response = $this->post('api/action-roles?token=' . $token, [
            'action'   => 'controller.action3',
            'role_ids' => json_encode([1, 4])
        ], []);

        // Check response status
        $response->assertStatus(453);

        // Check response structure
        $response->assertJsonStructure(
            [
                'success',
                'message'
            ]
        );

        //Check response data
        $responseJSON = json_decode($response->getContent(), true);
        $success      = $responseJSON['success'];  // array
        $message      = $responseJSON['message'];  // array

        $this->assertEquals(false, $success);
        $this->assertEquals("Inappropriate Role ID sent", $message);
    }

//    /**
//     * Check Index If Roles-IDs Are Wrong:
//     *   Check login
//     *   Check response status
//     *   Check response structure
//     *   Check response data
//     */
//    public function testIndexIfRolesIdsAreWrong()
//    {
//        // Check login
//        $response = $this->post('api/auth/login', [
//            'email'    => 'test1@email.com',
//            'password' => '123456'
//        ]);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $token        = $responseJSON['token'];
//
//        $this->get('api/auth/me?token=' . $token, [])->assertJson([
//            'name'  => 'Test',
//            'email' => 'test1@email.com'
//        ])->isOk();
//
//        // Delete roles
//        $response = $this->delete('api/roles/3?token=' . $token, []);
//        $response = $this->delete('api/roles/2?token=' . $token, []);
//        $response = $this->delete('api/roles/1?token=' . $token, []);
//
//        // Request
//        $response = $this->get('api/action-roles?token=' . $token, []);
//
//        // Check response status
//        $response->assertStatus(422);
//
//        // Check response structure
//        $response->assertJsonStructure(
//            [
//                'success',
//                'message'
//            ]
//        );
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];  // array
//        $message      = $responseJSON['message'];  // array
//
//        $this->assertEquals(false, $success);
//        $this->assertEquals('Roles do not exist', $message);
//    }

//    public function testShow()
//    {
//        // Check login
//        $response = $this->post('api/auth/login', [
//            'email'    => 'test@email.com',
//            'password' => '123456'
//        ]);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $token        = $responseJSON['token'];
//
//        $this->get('api/auth/me?token=' . $token, [])->assertJson([
//            'name'  => 'Test',
//            'email' => 'test@email.com'
//        ])->isOk();
//
//        // Get roles from DB roles
//        $roles = DB::table('roles')->get();
//
//        // Check the count of roles (2)
//        $this->assertEquals(count($roles), 2);
//        $lastRole   = $roles->last();
//        $lastRoleId = $lastRole->id;
//
//        // Check fail getting role with id = ID+1 by controller:
//        $response = $this->get('api/roles/' . ($lastRoleId + 1) . '?token=' . $token, []);
//
//        // Check response status
//        $response->assertStatus(204);
//
//        // Check getting role with id = ID by controller:
//        $response = $this->get('api/roles/' . $lastRoleId . '?token=' . $token, []);
//
//        // Check response status
//        $response->assertStatus(200);
//
//        // Check response structure
//        $response->assertJsonStructure(
//            [
//                'success',
//                'data' =>
//                    [
//                        'id',
//                        'name',
//                        'description',
//                        'created_at',
//                        'updated_at'
//                    ],
//                'message'
//            ]
//        );
//
//        //Check response data
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];  // array
//        $message      = $responseJSON['message'];  // array
//
//        $this->assertEquals($success, true);
//        $this->assertEquals($message, 'Role retrieved successfully.');
//    }
//
//    public function testUpdate()
//    {
//        // Check login
//        $response = $this->post('api/auth/login', [
//            'email'    => 'test@email.com',
//            'password' => '123456'
//        ]);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $token        = $responseJSON['token'];
//
//        $this->get('api/auth/me?token=' . $token, [])->assertJson([
//            'name'  => 'Test',
//            'email' => 'test@email.com'
//        ])->isOk();
//
//        // Get roles from DB roles
//        $roles      = DB::table('roles')->get();
//        $lastRole   = $roles->last();
//        $lastRoleId = $lastRole->id;
//
//        $response = $this->put('api/roles/' . $lastRoleId . '?token=' . $token, [
//            "name" => "Test Role Updated"
//        ]);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];
//        $message      = $responseJSON['message'];
//        $data         = $responseJSON['data'];
//        $data         = json_decode($data);
//
//        $this->assertEquals($success, true);
//        $this->assertEquals($message, "Role is updated successfully.");
//        $this->assertEquals($data->name, "Test Role Updated");
//    }
//
//    public function testDelete()
//    {
//        // Check login
//        $response = $this->post('api/auth/login', [
//            'email'    => 'test@email.com',
//            'password' => '123456'
//        ]);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $token        = $responseJSON['token'];
//
//        $this->get('api/auth/me?token=' . $token, [])->assertJson([
//            'name'  => 'Test',
//            'email' => 'test@email.com'
//        ])->isOk();
//
//        // Get roles from DB roles
//        $roles      = DB::table('roles')->get();
//        $lastRole   = $roles->last();
//        $lastRoleId = $lastRole->id;
//        $failRoleId = $lastRoleId + 1;
//
//        // Delete not existing role
//        $response = $this->delete('api/roles/' . $failRoleId . '?token=' . $token, []);
//
////        print_r($response);
//        $response->assertStatus(204);
//
////        $responseJSON = json_decode($response->getContent(), true);
////        $success      = $responseJSON['success'];
////        $message      = $responseJSON['message'];
////
////        $this->assertEquals(false, $success);
////        $this->assertEquals("Could not find Role.", $message );
//
//        // Delete the last role
//        $response = $this->delete('api/roles/' . $lastRoleId . '?token=' . $token, []);
//
//        $response->assertStatus(200);
//
//        $responseJSON = json_decode($response->getContent(), true);
//        $success      = $responseJSON['success'];
//        $message      = $responseJSON['message'];
//
//        $this->assertEquals($success, true);
//        $this->assertEquals($message, "Role is deleted successfully.");
//    }
}
